pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "boudidahamir/gestion-station-ski"
        NEXUS_URL = "http://192.168.18.134:8081/repository/maven-releases/tn/esprit/spring/gestion-station-ski/1.0/gestion-station-ski-1.0.jar"
        JAR_NAME = "gestion-station-ski-1.0.jar"
    }
    stages {
        stage('Main') {
            steps {
                script {
                    try {
                        echo "Echo Test of amirboudidah Branch"
                        currentBuild.description = (currentBuild.description ?: '') + "Main: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Main: ❌\n"
                        throw e
                    }
                }
            }
        }
        stage('Compile') {
            steps {
                script {
                    try {
                        checkout scm
                        sh 'mvn clean compile'
                        currentBuild.description = (currentBuild.description ?: '') + "Compile: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Compile: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('sonarqube') {
                            sh 'mvn sonar:sonar'
                        }
                        currentBuild.description = (currentBuild.description ?: '') + "SonarQube Analysis: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "SonarQube Analysis: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('Test Class Instructor') {
            steps {
                script {
                    try {
                        sh 'mvn clean test'
                        currentBuild.description = (currentBuild.description ?: '') + "Test Class Instructor: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Test Class Instructor: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        sh 'mvn clean package'
                        currentBuild.description = (currentBuild.description ?: '') + "Build: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Build: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    try {
                        sh 'mvn clean deploy -DskipTests'
                        currentBuild.description = (currentBuild.description ?: '') + "Deploy to Nexus: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Deploy to Nexus: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                        currentBuild.description = (currentBuild.description ?: '') + "Build Docker Image: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Build Docker Image: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            sh(returnStatus: true, script: "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin")
                        }
                        sh "docker push ${DOCKER_IMAGE}"
                        currentBuild.description = (currentBuild.description ?: '') + "Push Docker Image: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Push Docker Image: ❌\n"
                        throw e
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    try {
                        sh 'docker-compose up -d'
                        currentBuild.description = (currentBuild.description ?: '') + "Run Docker Compose: ✅\n"
                    } catch (Exception e) {
                        currentBuild.description = (currentBuild.description ?: '') + "Run Docker Compose: ❌\n"
                        throw e
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def successStages = currentBuild.description.readLines().findAll { it.endsWith('✅') }.join('\n')
                def failedStages = currentBuild.description.readLines().findAll { it.endsWith('❌') }.join('\n')
                slackSend(channel: '#debopsproject', message: "*Build succeeded:* ${env.BUILD_URL}\n\nSuccessful Stages:\n${successStages}\n\nFailed Stages:\n${failedStages}", color: 'good')
                def emailBody = """
                <html>
                    <body>
                        <h2 style="color: green;">BUILD WAS SUCCESSFUL!</h2>
                        <p>The build <b>${env.BUILD_NUMBER}</b> for Job <b>${env.JOB_NAME}</b> was successful.</p>
                        <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                        <p><strong>Build Duration:</strong> ${currentBuild.durationString}</p>

                        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%;">
                            <thead>
                                <tr>
                                    <th style="text-align: left;">Stage</th>
                                    <th style="text-align: left;">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${successStages ? successStages.replaceAll(/(.+?): ✅/, '<tr><td>$1</td><td style="color: green;">Success ✔️</td></tr>') : '<tr><td colspan="2">No stages succeeded.</td></tr>'}
                                ${failedStages ? failedStages.replaceAll(/(.+?): ❌/, '<tr><td>$1</td><td style="color: red;">Failed ❌</td></tr>') : '<tr><td colspan="2"><b>No stages failed.</b></td></tr>'}
                            </tbody>
                        </table>
                        <br/>
                        <p>Best regards,<br/>Jenkins</p>
                    </body>
                </html>
                """

                emailext (
                    subject: "Build Succeeded: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: emailBody,
                    to: "amirboudidah1999@gmail.com",
                    mimeType: 'text/html'
                )
            }
        }
        failure {
            script {
                def successStages = currentBuild.description.readLines().findAll { it.endsWith('✅') }.join('\n')
                def failedStages = currentBuild.description.readLines().findAll { it.endsWith('❌') }.join('\n')
                slackSend(channel: '#debopsproject', message: "*Build failed:* ${env.BUILD_URL}\n\nSuccessful Stages:\n${successStages}\n\nFailed Stages:\n${failedStages}", color: 'danger')
                def emailBody = """
                <html>
                    <body>
                        <h2 style="color: red;">Build Failed!</h2>
                        <p>The build <b>${env.BUILD_NUMBER}</b> for Job <b>${env.JOB_NAME}</b> has failed.</p>
                        <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                        <p><strong>Build Duration:</strong> ${currentBuild.durationString}</p>

                        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%;">
                            <thead>
                                <tr>
                                    <th style="text-align: left;">Stage</th>
                                    <th style="text-align: left;">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${successStages ? successStages.replaceAll(/(.+?): ✅/, '<tr><td>$1</td><td style="color: green;">Success ✔️</td></tr>') : '<tr><td colspan="2">No stages succeeded.</td></tr>'}
                                ${failedStages ? failedStages.replaceAll(/(.+?): ❌/, '<tr><td>$1</td><td style="color: red;">Failed ❌</td></tr>') : '<tr><td colspan="2"><b>No stages failed.</b></td></tr>'}
                            </tbody>
                        </table>
                        <br/>
                        <p>Best regards,<br/>Jenkins</p>
                    </body>
                </html>
                """

                emailext (
                    subject: "Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: emailBody,
                    to: "amirboudidah1999@gmail.com",
                    mimeType: 'text/html'
                )
            }
        }
    }

}
